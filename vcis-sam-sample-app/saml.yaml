AWSTemplateFormatVersion: '2010-09-09'
Transform: ["AWS::Serverless-2016-10-31", VcisCommonTagsMacro]

Description: >
  vcis-sam-sample-app
  Sample SAM Template for vcis-sam-sample-app

Parameters:
  Env:
    Description: >-
      A value used to describe the environment you will deploy to. This value will be used to get values
      from SSM Parameter Store. Keys in Parameter store should begin with: /vcis/environment.
    Type: String
    AllowedValues:
      - poc
      - dev
      - it
      - prod
      - non-prod
#  Stage:
#    Description: "Stage"
#    Type: String
#    AllowedValues:
#      - DEV
#      - TEST
#      - PROD
#    Default: DEV
  FunctionName:
    Description: "Function Name. Stage will be added to the name: {FunctionName}-{Stage}"
    Type: String
    Default: "vcis-app-sam-sample-app"
  Timeout:
    Description: "Timeout [s]"
    Type: Number
    Default: 60
  MemorySize:
    Description: "Memory Size [MB]"
    Type: Number
    Default: 128
  AccountLevelResourcesStackName:
    Description: "Account Level Resources Stack Name"
    Type: String
    Default: 'vcis-app-non-prod-account-level-resources'
  ApiGwStackName:
    Description: "API Gateway Stack name"
    Type: String
    Default: 'vcis-app-dev-infra-pipeline-apigw-balance-extract'
#  VPCStackName:
#    Description: "VPC Stack name"
#    Type: String

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${FunctionName}-${Stage}
      CodeUri: ./
      Handler: app.lambdaHandler
      Runtime: nodejs8.10
      Environment:
        Variables:
          STAGE:
            Ref: Stage
          REGION:
            Ref: AWS::Region
          LOG_GROUP:
            Fn::ImportValue: !Sub "${AccountLevelResourcesStackName}-LannisterLogGroup"
      Timeout:
        Ref: Timeout
      MemorySize:
          Ref: MemorySize
      Policies:
        - VPCAccessPolicy: {}
        #Inline Policy for Centralize Logging.
        - Statement:
            - Effect: Allow
              Action:
                - 'logs:DescribeLogStreams'
              Resource:
                Fn::Join:
                  - ''
                  - - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:'
                    - Fn::ImportValue: !Sub "${AccountLevelResourcesStackName}-LannisterLogGroup"
                    - ':log-stream:*'
        - Statement:
            - Effect: Allow
              Action: 'iam:*'
              Resource: '*'
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/standard-permissions-boundary'

  HelloWorldFunction2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${FunctionName}2-${Stage}
      CodeUri: ./
      Handler: app.lambdaHandler2
      Runtime: nodejs8.10
      Environment:
        Variables:
          STAGE:
            Ref: Stage
          REGION:
            Ref: AWS::Region
          LOG_GROUP:
            Fn::ImportValue: !Sub "${AccountLevelResourcesStackName}-LannisterLogGroup"
      Timeout:
        Ref: Timeout
      MemorySize:
        Ref: MemorySize
      Policies:
        - VPCAccessPolicy: {}
        #Inline Policy for Centralize Logging.
        - Statement:
            - Effect: Allow
              Action:
                - 'logs:DescribeLogStreams'
              Resource:
                Fn::Join:
                  - ''
                  - - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:'
                    - Fn::ImportValue: !Sub "${AccountLevelResourcesStackName}-LannisterLogGroup"
                    - ':log-stream:*'
        - Statement:
            - Effect: Allow
              Action: 'iam:*'
              Resource: '*'
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/standard-permissions-boundary'

  #Function Alias
  LambdaAlias:
    Type: "AWS::Lambda::Alias"
    Properties:
      FunctionName: !Ref HelloWorldFunction
      FunctionVersion: "$LATEST"
      Name:
        Ref: Stage

  #Lambda permission to be invoked by API Gateway.
  Permission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LambdaAlias
      - HelloWorldFunction
    Properties:
      FunctionName:
        Fn::Sub: ${HelloWorldFunction}:${Stage}
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ''
          - - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:'
            - Fn::ImportValue: !Sub "${ApiGwStackName}-ApiGatewayId"
            - '/*/*/*'

  #Deployment of the API GW
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: #All methods of API-GW created.
      - ApiGatewayMethodHelloGet
      - ApiGatewayMethodHelloOptions
    Properties:
      Description:
        Fn::Sub: ${FunctionName}
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGwStackName}-ApiGatewayId"

  #API Resources - Level 1
  ApiGatewayResourceHello:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::ImportValue: !Sub "${ApiGwStackName}-RootResourceId"
      PathPart: "hello"
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGwStackName}-ApiGatewayId"


  #Methods
  ApiGatewayMethodHelloGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}:${Stage}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResourceHello
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGwStackName}-ApiGatewayId"

  ApiGatewayMethodHelloOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGwStackName}-ApiGatewayId"
      ResourceId: !Ref ApiGatewayResourceHello
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

Outputs:
  HelloWorldFunctionOutput:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
