AWSTemplateFormatVersion: '2010-09-09'
Description: VCIS API Gateway

Transform: [VcisCommonTagsMacro]

Parameters:
  Env:
    Type: String
    Description: Environment in which resources should be deployed
    AllowedValues:
      - poc
      - dev
      - it
      - prod
    ConstraintDescription: Must be either poc, dev, it or prod

  ProjectModuleTag:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Project Module Tag SSM Param Name. Default is '/vcis/{Env}/infra/tags/project-module-value-capture-industry-system'

  RestApiName:
    Type: String
    Description: 'The API Name (eg: vcis-pod-credit-exemption-balance)'

  RestApiDescription:
    Type: String
    Description: Rest API Description

  StageName:
    Type: String
    Description: The name of the API Stage. Default is 'release' stage
    Default: 'release'

  RestApiCustomDomainName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Rest API Custom Domain Name. Default value is 'api.pod-np.its-plus.com' (NonProd) and 'api.pod.its-plus.com' (Prod)

  LambdaAuthorizerStackName:
    Type: String
    Description: Stack that exports Lambda Authorizer ARN.

  MinimumCompressionSize:
    Type: Number
    Default: 0
    Description: 'Compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.'

  CustomTags:
    Type: String
    Description: "Custom tags to apply on template"
    Default: ''

Mappings:
  EnvStageVarMapping:
    poc:
      EnvStageVar: 'DEV'
    dev:
      EnvStageVar: 'DEV'
    it:
      EnvStageVar: 'TEST'
    prod:
      EnvStageVar: 'PROD'

Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${RestApiName}-${Env}'
      Description: !Ref RestApiDescription
      ApiKeySourceType: HEADER
      MinimumCompressionSize: !Ref MinimumCompressionSize
      EndpointConfiguration:
        Types:
          - EDGE

    ## Lambda Authorizer
  ApiGatewayLambdaAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    DependsOn: RestApi
    Properties:
      Name: !Sub 'vcis-pod-ping-authorizer-${Env}'
      Type: 'REQUEST'
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Join
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - Fn::ImportValue: !Sub "${LambdaAuthorizerStackName}-PodPingAuthorizer"
          - '/invocations'
      IdentitySource: 'method.request.header.Authorization'
      RestApiId: !Ref RestApi

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - MasterdataPath
    - MasterdatalocationPath
    - MasterdatalocationcityPath
    - MasterdatalocationcitycityCodePath
    - MasterdatalocationdocPath
    - MasterdatalocationdocproxyPath
    - MasterdatalocationstatePath
    - MasterdatalocationstatestateCodePath
    - MasterdatalocationstatestateCodecityPath
    - MasterdatalocationversionPath
    - MasterdatalocationversioncityPath
    - MasterdatalocationversioncitycityCodePath
    - MasterdatalocationversionstatePath
    - MasterdatalocationversionstatestateCodePath
    - MasterdatalocationversionstatestateCodecityPath
    - MasterdatalocationcityOptionsMethod
    - MasterdatalocationcitycityCodeOptionsMethod
    - MasterdatalocationdocproxyOptionsMethod
    - MasterdatalocationstateOptionsMethod
    - MasterdatalocationstatestateCodeOptionsMethod
    - MasterdatalocationstatestateCodecityOptionsMethod
    - MasterdatalocationversioncityOptionsMethod
    - MasterdatalocationversioncitycityCodeOptionsMethod
    - MasterdatalocationversionstateOptionsMethod
    - MasterdatalocationversionstatestateCodeOptionsMethod
    - MasterdatalocationversionstatestateCodecityOptionsMethod
    Properties:
      Description: API Deployment
      RestApiId: !Ref RestApi

  Stage:
    Type: AWS::ApiGateway::Stage
    DependsOn: Deployment
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref Deployment
      StageName: !Ref StageName
      Variables:
        environment: !FindInMap [EnvStageVarMapping, !Ref Env, EnvStageVar]

  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: Stage
    Properties:
      DomainName: !Ref RestApiCustomDomainName
      BasePath: !Sub '${RestApiName}-${Env}'
      RestApiId: !Ref RestApi
      Stage: !Ref Stage

  MasterdataPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "masterdata"
      RestApiId: !Ref RestApi

  MasterdatalocationPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdataPath
      PathPart: "location"
      RestApiId: !Ref RestApi

  MasterdatalocationcityPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationPath
      PathPart: "city"
      RestApiId: !Ref RestApi

  MasterdatalocationcityOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationcityPath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationcitycityCodePath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationcityPath
      PathPart: "{cityCode}"
      RestApiId: !Ref RestApi

  MasterdatalocationcitycityCodeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationcitycityCodePath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationdocPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationPath
      PathPart: "doc"
      RestApiId: !Ref RestApi

  MasterdatalocationdocproxyPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationdocPath
      PathPart: "{proxy+}"
      RestApiId: !Ref RestApi

  MasterdatalocationdocproxyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationdocproxyPath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationstatePath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationPath
      PathPart: "state"
      RestApiId: !Ref RestApi

  MasterdatalocationstateOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationstatePath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationstatestateCodePath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationstatePath
      PathPart: "{stateCode}"
      RestApiId: !Ref RestApi

  MasterdatalocationstatestateCodeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationstatestateCodePath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationstatestateCodecityPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationstatestateCodePath
      PathPart: "city"
      RestApiId: !Ref RestApi

  MasterdatalocationstatestateCodecityOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationstatestateCodecityPath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationversionPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationPath
      PathPart: "{version}"
      RestApiId: !Ref RestApi

  MasterdatalocationversioncityPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationversionPath
      PathPart: "city"
      RestApiId: !Ref RestApi

  MasterdatalocationversioncityOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationversioncityPath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationversioncitycityCodePath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationversioncityPath
      PathPart: "{cityCode}"
      RestApiId: !Ref RestApi

  MasterdatalocationversioncitycityCodeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationversioncitycityCodePath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationversionstatePath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationversionPath
      PathPart: "state"
      RestApiId: !Ref RestApi

  MasterdatalocationversionstateOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationversionstatePath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationversionstatestateCodePath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationversionstatePath
      PathPart: "{stateCode}"
      RestApiId: !Ref RestApi

  MasterdatalocationversionstatestateCodeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationversionstatestateCodePath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  MasterdatalocationversionstatestateCodecityPath:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayLambdaAuthorizer
    Properties:
      ParentId: !Ref MasterdatalocationversionstatestateCodePath
      PathPart: "city"
      RestApiId: !Ref RestApi

  MasterdatalocationversionstatestateCodecityOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestApi
      ResourceId: !Ref MasterdatalocationversionstatestateCodecityPath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

Outputs:
  Endpoint:
    Description: Rest Api Endpoint URL
    Value: !Sub 'https://${RestApiName}-${Env}.execute-api.${AWS::Region}.amazonaws.com'

  RestApiGatewayId:
    Description: ApiGatewayId
    Value: !Ref RestApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'

  RootResourceId:
    Description: RootResourceId
    Value: !GetAtt RestApi.RootResourceId
    Export:
      Name: !Sub '${AWS::StackName}-RootResourceId'

  LambdaAuthorizerId:
    Description: LambdaAuthorizerId
    Value: !Ref ApiGatewayLambdaAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}-LambdaAuthorizerId'

  MasterdataPath:
    Value: !Ref MasterdataPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdataPath'
  MasterdatalocationPath:
    Value: !Ref MasterdatalocationPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationPath'
  MasterdatalocationcityPath:
    Value: !Ref MasterdatalocationcityPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationcityPath'
  MasterdatalocationcitycityCodePath:
    Value: !Ref MasterdatalocationcitycityCodePath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationcitycityCodePath'
  MasterdatalocationdocPath:
    Value: !Ref MasterdatalocationdocPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationdocPath'
  MasterdatalocationdocproxyPath:
    Value: !Ref MasterdatalocationdocproxyPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationdocproxyPath'
  MasterdatalocationstatePath:
    Value: !Ref MasterdatalocationstatePath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationstatePath'
  MasterdatalocationstatestateCodePath:
    Value: !Ref MasterdatalocationstatestateCodePath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationstatestateCodePath'
  MasterdatalocationstatestateCodecityPath:
    Value: !Ref MasterdatalocationstatestateCodecityPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationstatestateCodecityPath'
  MasterdatalocationversionPath:
    Value: !Ref MasterdatalocationversionPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationversionPath'
  MasterdatalocationversioncityPath:
    Value: !Ref MasterdatalocationversioncityPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationversioncityPath'
  MasterdatalocationversioncitycityCodePath:
    Value: !Ref MasterdatalocationversioncitycityCodePath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationversioncitycityCodePath'
  MasterdatalocationversionstatePath:
    Value: !Ref MasterdatalocationversionstatePath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationversionstatePath'
  MasterdatalocationversionstatestateCodePath:
    Value: !Ref MasterdatalocationversionstatestateCodePath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationversionstatestateCodePath'
  MasterdatalocationversionstatestateCodecityPath:
    Value: !Ref MasterdatalocationversionstatestateCodecityPath
    Export:
      Name: !Sub '${AWS::StackName}-MasterdatalocationversionstatestateCodecityPath'
