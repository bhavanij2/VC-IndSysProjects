"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const vcis_cdk_utils_1 = require("@monsantoit/vcis-cdk-utils");
const vcis_ssm_string_parameter_construct_1 = require("../vcis-ssm-parameter/vcis-ssm-string-parameter-construct");
class VpcParamConfigConstruct extends cdk.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.scope = scope;
        this.persistVpcCidr();
        this.persistPrimaryCentralBastionIP();
        this.persistSecondaryCentralBastionIP();
        this.persistBastionHostKeyName();
        this.persistBastionInstanceType();
    }
    persistVpcCidr() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'vpcCidrListSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).vpcCidrList,
            name: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).vpcCidrList,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_INPUT_PARAMS_HOLDER).vpcCidrList
        });
    }
    persistPrimaryCentralBastionIP() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'primaryCentralBastionIpSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).primaryCentralBastionIP,
            name: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).primaryCentralBastionIP,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_INPUT_PARAMS_HOLDER).primaryCentralBastionIP
        });
    }
    persistSecondaryCentralBastionIP() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'secondaryCentralBastionIpSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).secondaryCentralBastionIP,
            name: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).secondaryCentralBastionIP,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_INPUT_PARAMS_HOLDER).secondaryCentralBastionIP
        });
    }
    persistBastionHostKeyName() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'bastionHostKeyNameSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).bastionHostKeyName,
            name: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).bastionHostKeyName,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_INPUT_PARAMS_HOLDER).bastionHostKeyName
        });
    }
    persistBastionInstanceType() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'bastionInstanceTypeSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).bastionInstanceType,
            name: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER).bastionInstanceType,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(VpcParamConfigConstruct.VPC_INPUT_PARAMS_HOLDER).bastionInstanceType
        });
    }
}
VpcParamConfigConstruct.VPC_SSM_PARAMS_PATH_HOLDER = 'vpc-ssm-param-path';
VpcParamConfigConstruct.VPC_INPUT_PARAMS_HOLDER = 'vpc';
exports.VpcParamConfigConstruct = VpcParamConfigConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLXBhcmFtLWNvbmZpZy1jb25zdHJ1Y3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2cGMtcGFyYW0tY29uZmlnLWNvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFxQztBQUVyQywrREFBa0U7QUFDbEUsbUhBQTRHO0FBRTVHLE1BQWEsdUJBQXdCLFNBQVEsR0FBRyxDQUFDLFNBQVM7SUFLdEQsWUFBNkIsS0FBZ0IsRUFBRSxFQUFVO1FBQ3JELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFEUSxVQUFLLEdBQUwsS0FBSyxDQUFXO1FBR3pDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRU8sY0FBYztRQUNsQixJQUFJLHFFQUErQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUscUJBQXFCLEVBQUU7WUFDbkUsV0FBVyxFQUFFLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLFdBQVc7WUFDckcsSUFBSSxFQUFFLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLFdBQVc7WUFDOUYsV0FBVyxFQUFFLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLFdBQVc7U0FDckcsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLDhCQUE4QjtRQUNsQyxJQUFJLHFFQUErQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7WUFDL0UsV0FBVyxFQUFFLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLHVCQUF1QjtZQUNqSCxJQUFJLEVBQUMscUNBQW9CLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLDBCQUEwQixDQUFDLENBQUMsdUJBQXVCO1lBQ3pHLFdBQVcsRUFBRSxxQ0FBb0IsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyx1QkFBdUI7U0FDakgsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLGdDQUFnQztRQUNwQyxJQUFJLHFFQUErQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsbUNBQW1DLEVBQUU7WUFDakYsV0FBVyxFQUFFLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLHlCQUF5QjtZQUNuSCxJQUFJLEVBQUUscUNBQW9CLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLDBCQUEwQixDQUFDLENBQUMseUJBQXlCO1lBQzVHLFdBQVcsRUFBRSxxQ0FBb0IsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyx5QkFBeUI7U0FDbkgsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLHlCQUF5QjtRQUM3QixJQUFJLHFFQUErQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsNEJBQTRCLEVBQUU7WUFDMUUsV0FBVyxFQUFFLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLGtCQUFrQjtZQUM1RyxJQUFJLEVBQUUscUNBQW9CLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLDBCQUEwQixDQUFDLENBQUMsa0JBQWtCO1lBQ3JHLFdBQVcsRUFBRSxxQ0FBb0IsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxrQkFBa0I7U0FDNUcsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLDBCQUEwQjtRQUM5QixJQUFJLHFFQUErQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsNkJBQTZCLEVBQUU7WUFDM0UsV0FBVyxFQUFFLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLG1CQUFtQjtZQUM3RyxJQUFJLEVBQUUscUNBQW9CLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLDBCQUEwQixDQUFDLENBQUMsbUJBQW1CO1lBQ3RHLFdBQVcsRUFBRSxxQ0FBb0IsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxtQkFBbUI7U0FDN0csQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUFuRGMsa0RBQTBCLEdBQUcsb0JBQW9CLENBQUM7QUFDbEQsK0NBQXVCLEdBQUcsS0FBSyxDQUFDO0FBSG5ELDBEQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ0Bhd3MtY2RrL2Nkayc7XG5pbXBvcnQgeyBJbnB1dFBhcmFtZXRlckhvbGRlciB9IGZyb20gJ0Btb25zYW50b2l0L3ZjaXMtY2RrLXV0aWxzJztcbmltcG9ydCB7IFZjaXNTc21TdHJpbmdQYXJhbWV0ZXJDb25zdHJ1Y3QgfSBmcm9tICcuLi92Y2lzLXNzbS1wYXJhbWV0ZXIvdmNpcy1zc20tc3RyaW5nLXBhcmFtZXRlci1jb25zdHJ1Y3QnO1xuXG5leHBvcnQgY2xhc3MgVnBjUGFyYW1Db25maWdDb25zdHJ1Y3QgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcblxuICAgIHByaXZhdGUgc3RhdGljIFZQQ19TU01fUEFSQU1TX1BBVEhfSE9MREVSID0gJ3ZwYy1zc20tcGFyYW0tcGF0aCc7XG4gICAgcHJpdmF0ZSBzdGF0aWMgVlBDX0lOUFVUX1BBUkFNU19IT0xERVIgPSAndnBjJztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIHRoaXMucGVyc2lzdFZwY0NpZHIoKTtcbiAgICAgICAgdGhpcy5wZXJzaXN0UHJpbWFyeUNlbnRyYWxCYXN0aW9uSVAoKTtcbiAgICAgICAgdGhpcy5wZXJzaXN0U2Vjb25kYXJ5Q2VudHJhbEJhc3Rpb25JUCgpO1xuICAgICAgICB0aGlzLnBlcnNpc3RCYXN0aW9uSG9zdEtleU5hbWUoKTtcbiAgICAgICAgdGhpcy5wZXJzaXN0QmFzdGlvbkluc3RhbmNlVHlwZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGVyc2lzdFZwY0NpZHIoKSB7XG4gICAgICAgIG5ldyBWY2lzU3NtU3RyaW5nUGFyYW1ldGVyQ29uc3RydWN0KHRoaXMuc2NvcGUsICd2cGNDaWRyTGlzdFNzbVBhcmFtJywge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IElucHV0UGFyYW1ldGVySG9sZGVyLmdldChWcGNQYXJhbUNvbmZpZ0NvbnN0cnVjdC5WUENfU1NNX1BBUkFNU19QQVRIX0hPTERFUikudnBjQ2lkckxpc3QsXG4gICAgICAgICAgICBuYW1lOiBJbnB1dFBhcmFtZXRlckhvbGRlci5nZXQoVnBjUGFyYW1Db25maWdDb25zdHJ1Y3QuVlBDX1NTTV9QQVJBTVNfUEFUSF9IT0xERVIpLnZwY0NpZHJMaXN0LFxuICAgICAgICAgICAgc3RyaW5nVmFsdWU6IElucHV0UGFyYW1ldGVySG9sZGVyLmdldChWcGNQYXJhbUNvbmZpZ0NvbnN0cnVjdC5WUENfSU5QVVRfUEFSQU1TX0hPTERFUikudnBjQ2lkckxpc3RcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwZXJzaXN0UHJpbWFyeUNlbnRyYWxCYXN0aW9uSVAoKSB7XG4gICAgICAgIG5ldyBWY2lzU3NtU3RyaW5nUGFyYW1ldGVyQ29uc3RydWN0KHRoaXMuc2NvcGUsICdwcmltYXJ5Q2VudHJhbEJhc3Rpb25JcFNzbVBhcmFtJywge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IElucHV0UGFyYW1ldGVySG9sZGVyLmdldChWcGNQYXJhbUNvbmZpZ0NvbnN0cnVjdC5WUENfU1NNX1BBUkFNU19QQVRIX0hPTERFUikucHJpbWFyeUNlbnRyYWxCYXN0aW9uSVAsXG4gICAgICAgICAgICBuYW1lOklucHV0UGFyYW1ldGVySG9sZGVyLmdldChWcGNQYXJhbUNvbmZpZ0NvbnN0cnVjdC5WUENfU1NNX1BBUkFNU19QQVRIX0hPTERFUikucHJpbWFyeUNlbnRyYWxCYXN0aW9uSVAsXG4gICAgICAgICAgICBzdHJpbmdWYWx1ZTogSW5wdXRQYXJhbWV0ZXJIb2xkZXIuZ2V0KFZwY1BhcmFtQ29uZmlnQ29uc3RydWN0LlZQQ19JTlBVVF9QQVJBTVNfSE9MREVSKS5wcmltYXJ5Q2VudHJhbEJhc3Rpb25JUFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBlcnNpc3RTZWNvbmRhcnlDZW50cmFsQmFzdGlvbklQKCkge1xuICAgICAgICBuZXcgVmNpc1NzbVN0cmluZ1BhcmFtZXRlckNvbnN0cnVjdCh0aGlzLnNjb3BlLCAnc2Vjb25kYXJ5Q2VudHJhbEJhc3Rpb25JcFNzbVBhcmFtJywge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IElucHV0UGFyYW1ldGVySG9sZGVyLmdldChWcGNQYXJhbUNvbmZpZ0NvbnN0cnVjdC5WUENfU1NNX1BBUkFNU19QQVRIX0hPTERFUikuc2Vjb25kYXJ5Q2VudHJhbEJhc3Rpb25JUCxcbiAgICAgICAgICAgIG5hbWU6IElucHV0UGFyYW1ldGVySG9sZGVyLmdldChWcGNQYXJhbUNvbmZpZ0NvbnN0cnVjdC5WUENfU1NNX1BBUkFNU19QQVRIX0hPTERFUikuc2Vjb25kYXJ5Q2VudHJhbEJhc3Rpb25JUCxcbiAgICAgICAgICAgIHN0cmluZ1ZhbHVlOiBJbnB1dFBhcmFtZXRlckhvbGRlci5nZXQoVnBjUGFyYW1Db25maWdDb25zdHJ1Y3QuVlBDX0lOUFVUX1BBUkFNU19IT0xERVIpLnNlY29uZGFyeUNlbnRyYWxCYXN0aW9uSVBcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwZXJzaXN0QmFzdGlvbkhvc3RLZXlOYW1lKCkge1xuICAgICAgICBuZXcgVmNpc1NzbVN0cmluZ1BhcmFtZXRlckNvbnN0cnVjdCh0aGlzLnNjb3BlLCAnYmFzdGlvbkhvc3RLZXlOYW1lU3NtUGFyYW0nLCB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogSW5wdXRQYXJhbWV0ZXJIb2xkZXIuZ2V0KFZwY1BhcmFtQ29uZmlnQ29uc3RydWN0LlZQQ19TU01fUEFSQU1TX1BBVEhfSE9MREVSKS5iYXN0aW9uSG9zdEtleU5hbWUsXG4gICAgICAgICAgICBuYW1lOiBJbnB1dFBhcmFtZXRlckhvbGRlci5nZXQoVnBjUGFyYW1Db25maWdDb25zdHJ1Y3QuVlBDX1NTTV9QQVJBTVNfUEFUSF9IT0xERVIpLmJhc3Rpb25Ib3N0S2V5TmFtZSxcbiAgICAgICAgICAgIHN0cmluZ1ZhbHVlOiBJbnB1dFBhcmFtZXRlckhvbGRlci5nZXQoVnBjUGFyYW1Db25maWdDb25zdHJ1Y3QuVlBDX0lOUFVUX1BBUkFNU19IT0xERVIpLmJhc3Rpb25Ib3N0S2V5TmFtZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBlcnNpc3RCYXN0aW9uSW5zdGFuY2VUeXBlKCkge1xuICAgICAgICBuZXcgVmNpc1NzbVN0cmluZ1BhcmFtZXRlckNvbnN0cnVjdCh0aGlzLnNjb3BlLCAnYmFzdGlvbkluc3RhbmNlVHlwZVNzbVBhcmFtJywge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IElucHV0UGFyYW1ldGVySG9sZGVyLmdldChWcGNQYXJhbUNvbmZpZ0NvbnN0cnVjdC5WUENfU1NNX1BBUkFNU19QQVRIX0hPTERFUikuYmFzdGlvbkluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIG5hbWU6IElucHV0UGFyYW1ldGVySG9sZGVyLmdldChWcGNQYXJhbUNvbmZpZ0NvbnN0cnVjdC5WUENfU1NNX1BBUkFNU19QQVRIX0hPTERFUikuYmFzdGlvbkluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIHN0cmluZ1ZhbHVlOiBJbnB1dFBhcmFtZXRlckhvbGRlci5nZXQoVnBjUGFyYW1Db25maWdDb25zdHJ1Y3QuVlBDX0lOUFVUX1BBUkFNU19IT0xERVIpLmJhc3Rpb25JbnN0YW5jZVR5cGVcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbn0iXX0=