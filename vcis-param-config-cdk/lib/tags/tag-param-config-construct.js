"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const vcis_cdk_utils_1 = require("@monsantoit/vcis-cdk-utils");
const vcis_ssm_string_parameter_construct_1 = require("../vcis-ssm-parameter/vcis-ssm-string-parameter-construct");
class TagParamConfigConstruct extends cdk_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.scope = scope;
        this.persistOwnerTag();
        this.persistCostCenterTag();
        this.persistProjectTag();
        this.persistEnvironmentTag();
        this.persistRegulatedTag();
        this.persistDataClassificationTag();
    }
    persistOwnerTag() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'ownerTagSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).owner,
            name: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).owner,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_INPUT_PARAMS_HOLDER).owner
        });
    }
    persistCostCenterTag() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'costCenterSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).costCenter,
            name: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).costCenter,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_INPUT_PARAMS_HOLDER).costCenter
        });
    }
    persistProjectTag() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'projectSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).project,
            name: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).project,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_INPUT_PARAMS_HOLDER).project
        });
    }
    persistEnvironmentTag() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'environmentSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).environment,
            name: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).environment,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_INPUT_PARAMS_HOLDER).environment
        });
    }
    persistRegulatedTag() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'regulatedSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).regulated,
            name: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).regulated,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_INPUT_PARAMS_HOLDER).regulated
        });
    }
    persistDataClassificationTag() {
        new vcis_ssm_string_parameter_construct_1.VcisSsmStringParameterConstruct(this.scope, 'dataClassificationSsmParam', {
            description: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).dataClassification,
            name: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER).dataClassification,
            stringValue: vcis_cdk_utils_1.InputParameterHolder.get(TagParamConfigConstruct.TAGS_INPUT_PARAMS_HOLDER).dataClassification
        });
    }
}
TagParamConfigConstruct.TAGS_SSM_PARAM_PATH_HOLDER = 'tags-ssm-param-path';
TagParamConfigConstruct.TAGS_INPUT_PARAMS_HOLDER = "tags";
exports.TagParamConfigConstruct = TagParamConfigConstruct;
//# sourceMappingURL=data:application/json;base64,