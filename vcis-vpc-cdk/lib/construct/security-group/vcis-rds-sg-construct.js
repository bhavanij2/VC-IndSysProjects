"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const cdk_1 = require("@aws-cdk/cdk");
const ec2 = require("@aws-cdk/aws-ec2");
class VcisRdsSGConstruct {
    constructor(scope, id, props) {
        this.securityGroup = new ec2.CfnSecurityGroup(scope, id, {
            groupName: props.groupName,
            vpcId: props.vpc.vpcId,
            groupDescription: 'Allow access to RDS instances',
            securityGroupIngress: this.getIngressRules(props.vpc, props.bastionSecurityGroup),
            securityGroupEgress: this.getOutgressRules()
        });
        this.securityGroup.node.apply(new cdk_1.Tag('Name', `${props.stackName}/${props.groupName}`));
    }
    getOutgressRules() {
        return [
            {
                ipProtocol: aws_ec2_1.Protocol.All,
                cidrIp: '0.0.0.0/0'
            }
        ];
    }
    getIngressRules(vpc, bastionSecurityGroup) {
        const ingressRules = this.createIngressRulesFromBastionServers(bastionSecurityGroup);
        this.addIngressRulesFromPrivateSubnets(ingressRules, vpc);
        return ingressRules;
    }
    createIngressRulesFromBastionServers(bastionSecurityGroup) {
        return [
            {
                ipProtocol: aws_ec2_1.Protocol.Tcp,
                sourceSecurityGroupId: bastionSecurityGroup.securityGroupId,
                fromPort: 6379,
                toPort: 6379,
                description: 'allow Redis access from Bastion servers'
            },
            {
                ipProtocol: aws_ec2_1.Protocol.Tcp,
                sourceSecurityGroupId: bastionSecurityGroup.securityGroupId,
                fromPort: 3306,
                toPort: 3306,
                description: 'allow Aurora access from Bastion servers'
            },
            {
                ipProtocol: aws_ec2_1.Protocol.Tcp,
                sourceSecurityGroupId: bastionSecurityGroup.securityGroupId,
                fromPort: 5432,
                toPort: 5432,
                description: 'allow Postgres access from Bastion servers'
            }
        ];
    }
    addIngressRulesFromPrivateSubnets(ingressRules, vpc) {
        const privateCfnSubnetResources = vpc.privateSubnets.map(subnet => this.findCfnSubnetResource(subnet));
        const privateSubnetCidrBlocks = privateCfnSubnetResources.map(cfnSubnetResource => cfnSubnetResource['properties']['cidrBlock']);
        privateSubnetCidrBlocks.forEach(cidrBlock => ingressRules.push({
            ipProtocol: aws_ec2_1.Protocol.Tcp,
            cidrIp: cidrBlock,
            fromPort: 6379,
            toPort: 6379,
            description: 'allow Redis access from Private Subnet'
        }, {
            ipProtocol: aws_ec2_1.Protocol.Tcp,
            cidrIp: cidrBlock,
            fromPort: 3306,
            toPort: 3306,
            description: 'allow Aurora access from Private Subnet'
        }, {
            ipProtocol: aws_ec2_1.Protocol.Tcp,
            cidrIp: cidrBlock,
            fromPort: 5432,
            toPort: 5432,
            description: 'allow Postgres access from Private Subnet'
        }));
    }
    findCfnSubnetResource(subnet) {
        return subnet.node.children.find(child => child.resourceType === 'AWS::EC2::Subnet');
    }
}
exports.VcisRdsSGConstruct = VcisRdsSGConstruct;
//# sourceMappingURL=data:application/json;base64,