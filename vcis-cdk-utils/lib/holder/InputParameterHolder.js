"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const EnvironmentHolder_1 = require("./EnvironmentHolder");
const Tags_1 = require("../tags/Tags");
let inputParameters;
let inputParametersPromises;
let env;
class InputParameterHolder {
    static setup(node, loadTags = true) {
        inputParametersPromises = [];
        env = EnvironmentHolder_1.EnvironmentHolder.getEnv();
        const inputParams = node.getContext("InputParameters");
        if (inputParams === undefined) {
            throw Error("InputParameters needs to be defined on cdk.context file");
        }
        inputParameters = {};
        if (loadTags) {
            inputParams['generic'][Tags_1.Tags.tagKey] = Tags_1.Tags.tagsParameterStorePaths;
        }
        this.loadParametersFromPath(inputParams, 'generic');
        this.loadParametersFromPath(inputParams, env);
        return Promise.all(inputParametersPromises).then((params) => {
            const flatJson = params.reduce((obj, itm) => {
                obj[itm.paramName] = itm.value;
                return obj;
            }, {});
            inputParameters = this.unflatten(flatJson);
        });
    }
    static unflatten(data) {
        "use strict";
        if (Object(data) !== data || Array.isArray(data))
            return data;
        var regex = /\.?([^.\[\]]+)|\[(\d+)\]/g, resultholder = {};
        for (var p in data) {
            var cur = resultholder, prop = "", m;
            while (m = regex.exec(p)) {
                cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));
                prop = m[2] || m[1];
            }
            cur[prop] = data[p];
        }
        return resultholder[""] || resultholder;
    }
    ;
    static loadParametersFromPath(inputParams, rootParamPath) {
        const parameterStorePaths = inputParams[rootParamPath] ? inputParams[rootParamPath] : inputParams["non-prod"];
        this.populateParameters(parameterStorePaths);
    }
    static populateParameters(parameterStorePaths, fullKey) {
        if (parameterStorePaths) {
            Object.keys(parameterStorePaths).forEach(key => {
                const _fullKey = [fullKey, key].filter(key => key).join(".");
                const parameterValue = parameterStorePaths[key];
                if (typeof parameterValue === 'string') {
                    const parameterStringValue = parameterValue;
                    inputParametersPromises.push(this.fetchParameterValuePromise(parameterStringValue, _fullKey));
                }
                else {
                    this.populateParameters(parameterValue, _fullKey);
                }
            });
        }
    }
    static fetchParameterValuePromise(parameterValue, path) {
        const [prefix, paramValue, version] = parameterValue.split(":", 3);
        if (prefix.startsWith('ssm')) {
            if (version === undefined) {
                throw Error(`Version is required for entry ${paramValue}`);
            }
            return this.fetchParameterFromSSMAsync(paramValue, version, path);
        }
        return this.fetchConstantValueAsync(parameterValue, path);
    }
    static fetchConstantValueAsync(paramValue, path) {
        return new Promise(function (resolve) {
            resolve({ paramName: path, value: paramValue.replace('{ENV}', env) });
        });
    }
    static fetchParameterFromSSMAsync(paramValue, version, path) {
        const paramName = paramValue.replace('{ENV}', env);
        const ssm_sdk = new AWS.SSM();
        return ssm_sdk.getParameter({
            Name: `${paramName}:${version}`,
            WithDecryption: false
        }, function (err, data) {
            if (err) {
                console.log(err, err.stack); // an error occurred
                throw new Error(`Error occurred fetching param ${paramName}`);
            }
            else {
                if (data.Parameter === undefined) {
                    throw new Error(`Error occurred fetching param ${paramName}`);
                }
            }
        }).promise().then(result => {
            const _type = result.Parameter ? result.Parameter.Type : 'String';
            const _value = result.Parameter ? result.Parameter.Value : '';
            return {
                paramName: path,
                value: _type === 'StringList' && _value ? _value.split(",") : _value
            };
        }, error => { console.log(error); });
    }
}
InputParameterHolder.get = (paramName) => inputParameters[paramName];
exports.InputParameterHolder = InputParameterHolder;
//# sourceMappingURL=data:application/json;base64,