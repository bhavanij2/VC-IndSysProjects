AWSTemplateFormatVersion: '2010-09-09'
Description: 'VCIS ECS/Fargate Service'

Transform: [VcisCommonTagsMacro]

Parameters:
  Env:
    Type: String
    Description: Environment in which resources should be deployed
    AllowedValues:
      - poc
      - dev
      - it
      - prod
    ConstraintDescription: Must be either poc, dev, it or prod

  ProjectModuleTag:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Project Module Tag Value

  InfraSecuritySlackNotifierStackName:
    Description: >-
      The name of the stack that is exporting the Infra Operational Slack Notifier SNS Topic
    Type: 'String'

  VpcId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: >
      Vpc ID
      Default is '/vcis/${Env}/infra/vpc/output/vpc-id'

  PrivateSubnets:
    Type: 'AWS::SSM::Parameter::Value<CommaDelimitedList>'
    Description: >
      The list of SubnetIds to use for tasks defined in the service
      Default is '/vcis/${Env}/infra/vpc/output/private-subnets'
    ConstraintDescription: >
      Must be a list of at least two existing private subnets associated with at least two different availability zones.
      They should reside in the selected Virtual Private Cloud.

  ECSClusterName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: >
      ECS Cluster Name.
      Default is '/vcis/${Env}/infra/ecs/output/cluster-name'

  ServiceName:
    Description: 'Service Name'
    Type: String

  TaskPolicies:
    Description: 'Comma-delimited list of IAM managed policy ARNs to attach to the task IAM role'
    Type: String
    Default: ''

  AppImage:
    Description: 'The Docker image to use for the app container. You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag).'
    Type: String

  AppPort:
    Description: 'The port exposed by the app container that receives traffic from the load balancer.'
    Type: Number
    Default: 8080
    MinValue: 1
    MaxValue: 49150

  Cpu:
    Description: 'The minimum number of vCPUs to reserve for the container.'
    Type: String
    Default: '0.25'
    AllowedValues: ['0.25', '0.5', '1', '2', '4']

  Memory:
    Description: 'The amount (in GB) of memory used by the task.'
    Type: String
    Default: '0.5'
    AllowedValues: ['0.5', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']

  DesiredCount:
    Description: 'The number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1

  HealthCheckGracePeriod:
    Description: 'The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.'
    Type: Number
    Default: 60
    MinValue: 0
    MaxValue: 1800

  HealthCheckPath:
    Type: String
    Description: 'Applications health check path'
    Default: '/health'

  # Load Balancer Params
  LoadBalancerListener:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: >
      Load Balancer Listener ARN
      Default is '/vcis/${Env}/infra/alb/output/alb-listener'

  LoadBalancerSg:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: >
      Load Balancer Security Group
      Default is '/vcis/${Env}/infra/alb/output/alb-security-group'

  LoadBalancerHostPattern:
    Description: 'Optional host pattern. Specify LoadBalancerPathPattern and/or LoadBalancerHostPattern.'
    Type: String
    Default: ''
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255

  LoadBalancerPathPattern:
    Description: 'Optional path pattern. Specify LoadBalancerPathPattern and/or LoadBalancerHostPattern.'
    Type: String
    Default: '/*'
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255

  LoadBalancerPriority:
    Description: 'The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value. If a request satisfies a rule, Elastic Load Balancing ignores all subsequent rules. A target group can have only one rule with a given priority.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-99999]'
    MinValue: 1
    MaxValue: 99999

  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 60
    ConstraintDescription: 'Must be in the range [0-3600](seconds)'
    MinValue: 0
    MaxValue: 3600

  LoadBalancerIdleTimeout:
    Description: 'The idle timeout value, in seconds.'
    Type: Number
    Default: 60
    MinValue: 1
    MaxValue: 4000

  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  #Alarms parameters

  CPUUtilizationThreshold:
    Type: Number
    Description: Percentage threshold for CPU units that are used by running tasks in the service. If reached then an alarm will be activated
    MinValue: 0
    Default: 90

  MemoryUtilizationThreshold:
    Type: Number
    Description: Percentage threshold for memory that is used in the service. If reached then an alarm will be activated
    MinValue: 0
    Default: 90

  Period:
    Type: Number
    Description: The period, in seconds, over which the statistic is applied
    Default: 300

  LambdaSubscription:
    Type: String
    Description: ARN of an AWS Lambda function that can receive notifications from Amazon SNS

Mappings:

  CpuMap:
    '0.25':
      Cpu: 256
    '0.5':
      Cpu: 512
    '1':
      Cpu: 1024
    '2':
      Cpu: 2048
    '4':
      Cpu: 4096

  MemoryMap:
    '0.5':
      Memory: 512
    '1':
      Memory: 1024
    '2':
      Memory: 2048
    '3':
      Memory: 3072
    '4':
      Memory: 4096
    '5':
      Memory: 5120
    '6':
      Memory: 6144
    '7':
      Memory: 7168
    '8':
      Memory: 8192
    '9':
      Memory: 9216
    '10':
      Memory: 10240
    '11':
      Memory: 11264
    '12':
      Memory: 12288
    '13':
      Memory: 13312
    '14':
      Memory: 14336
    '15':
      Memory: 15360
    '16':
      Memory: 16384
    '17':
      Memory: 17408
    '18':
      Memory: 18432
    '19':
      Memory: 19456
    '20':
      Memory: 20480
    '21':
      Memory: 21504
    '22':
      Memory: 22528
    '23':
      Memory: 23552
    '24':
      Memory: 24576
    '25':
      Memory: 25600
    '26':
      Memory: 26624
    '27':
      Memory: 27648
    '28':
      Memory: 28672
    '29':
      Memory: 29696
    '30':
      Memory: 30720

Conditions:
  HasLoadBalancerPathPattern: !Not [!Equals [!Ref LoadBalancerPathPattern, '']]
  HasLoadBalancerHostPattern: !Not [!Equals [!Ref LoadBalancerHostPattern, '']]
  HasTaskPolicies: !Not [!Equals [!Ref TaskPolicies, '']]

Resources:

  ServiceTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: !Ref AppPort # overridden when containers are attached
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: !Ref LoadBalancerDeregistrationDelay
      VpcId: !Ref VpcId

  LoadBalancerHttpsListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ServiceTargetGroup
      Conditions: !If
        - HasLoadBalancerPathPattern
        - !If
          - HasLoadBalancerHostPattern
          - - Field: host-header
              Values:
                - !Ref LoadBalancerHostPattern
            - Field: path-pattern
              Values:
                - !Sub '${LoadBalancerPathPattern}'
          - - Field: path-pattern
              Values:
                - !Sub '${LoadBalancerPathPattern}'
        - !If
          - HasLoadBalancerHostPattern
          - - Field: host-header
              Values:
                - !Ref LoadBalancerHostPattern
          - [] # neither LoadBalancerHostPattern nor LoadBalancerPathPattern specified
      ListenerArn: !Ref LoadBalancerListener
      Priority: !Ref LoadBalancerPriority

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${ServiceName}-${Env}-log-group'
      RetentionInDays: !Ref LogsRetentionInDays

  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns: !If [HasTaskPolicies, !Split [',', !Ref TaskPolicies], !Ref 'AWS::NoValue']

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub '${ServiceName}-${Env}'
      ContainerDefinitions:
        - Name: !Sub '${ServiceName}-${Env}-app'
          Image: !Ref AppImage
          PortMappings:
            - ContainerPort: !Ref AppPort
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-group': !Ref LogGroup
              'awslogs-stream-prefix': !Sub '${ServiceName}-${Env}-app'
      Cpu: !FindInMap [CpuMap, !Ref Cpu, Cpu]
      ExecutionRoleArn: !GetAtt 'TaskExecutionRole.Arn'
      Memory: !FindInMap [MemoryMap, !Ref Memory, Memory]
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      TaskRoleArn: !GetAtt 'TaskRole.Arn'

  ServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Security Group for ${ServiceName}-${Env}'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSg
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          IpProtocol: tcp

  SecurityGroupChanges:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: >-
        A CloudWatch Event Rule that detects changes to security groups and
        publishes change events to an SNS topic for notification.
      State: ENABLED
      Targets:
        - Arn: Fn::ImportValue: !Sub "${InfraSecuritySlackNotifierStackName}-SNSTopicArn"
          Id: InfraSecuritySlackNotifierStackName
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
        resources: [
            !Join ['', ['arn:aws:ec2:*:${AWS::AccountId}:security-group/', !Ref ServiceSecurityGroup]]
          ]
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - AuthorizeSecurityGroupIngress
            - AuthorizeSecurityGroupEgress
            - RevokeSecurityGroupIngress
            - RevokeSecurityGroupEgress
            - DeleteSecurityGroup

  Service:
    DependsOn: LoadBalancerHttpsListenerRule
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Sub '${ServiceName}-${Env}'
      Cluster: !Ref ECSClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub '${ServiceName}-${Env}-app'
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref ServiceTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref PrivateSubnets
      TaskDefinition: !Ref TaskDefinition

  CPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub '{{resolve:ssm:/vcis/${Env}/sns/alarm-notify-topic}}'
      AlarmDescription: !Sub '${ServiceName} - The percentage of CPU units that are used in the service'
      AlarmName: !Sub '${ServiceName}-CPUUtilization'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/ECS'
      Period:
        !Ref Period
      Statistic: Average
      Threshold:
        !Ref CPUUtilizationThreshold
      Dimensions:
        [
        {
          "Name": "ServiceName",
          "Value": !Ref ServiceName
        }
        ]

  MemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub '{{resolve:ssm:/vcis/${Env}/sns/alarm-notify-topic}}'
      AlarmDescription: !Sub '${ServiceName} - The percentage of memory that is used in the service'
      AlarmName: !Sub '${ServiceName}-MemoryUtilization'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: 'MemoryUtilization'
      Namespace: 'AWS/ECS'
      Period:
        !Ref Period
      Statistic: Average
      Threshold:
        !Ref MemoryUtilizationThreshold
      Dimensions:
        [
        {
          "Name": "ServiceName",
          "Value": !Ref ServiceName
        }
        ]

Outputs:
  ServiceName:
    Description: 'Name of ECS Fargate Service'
    Value: !GetAtt Service.Name
    Export:
      Name: !Sub '${AWS::StackName}-ECSServiceName'
  ContainerName:
    Description: 'Name of Service Container'
    Value: !Sub '${ServiceName}-${Env}-app'
    Export:
      Name: !Sub '${AWS::StackName}-ECSServiceContainerName'
  ServiceTaskDefinition:
    Description: 'Task Definition Name'
    Value: !Sub '${ServiceName}-${Env}'
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinition'
  ServiceLogGroup:
    Description: 'Log Group Name'
    Value: !Ref LogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup'
  ECSTaskExecutionRole:
    Description: 'ECS Task Execution Role'
    Value: !Ref TaskExecutionRole
    Export:
      Name: !Sub '${AWS::StackName}-TaskExecutionRole'
  LoadBalancerListenerRule:
    Description: 'Load Balancer Listener Rule ARN'
    Value: !Ref LoadBalancerHttpsListenerRule
    Export:
      Name: !Sub '${AWS::StackName}-ALB-ListenerRule'
